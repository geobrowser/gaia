type Entity {
  id: ID!
  name: String
  # cover: How do we want to represent cover?
  blocks: [Entity]!
  createdAt: String!
  createdAtBlock: String!
  updatedAt: String!
  updatedAtBlock: String!

  values: [Value]!
  relations: [Relation]!

  types: [Entity]!
  spaces: [String]!
}

type Property {
  id: ID!
  entityId: String!
  valueType: String! # TODO enum/union

  entity: Entity
}

type Value {
  id: ID!
  propertyId: String!
  entityId: String!
  spaceId: String!
  value: String

  formatOption: String
  unitOption: String

  entity: Entity
  property: Property
}

type Relation {
  id: ID!
  spaceId: String!
  typeId: String!
  fromId: String!
  toId: String!
  toSpaceId: String
  index: String
  # these should be called `fromValue` and `toValue` instead?
  # fromPropertyId: String
  # toPropertyId: String

  type: Entity
  from: Entity
  to: Entity
  # toSpace: Space
}

type Query {
  entities(limit: Int = 100, offset: Int = 0): [Entity]!
  entity(id: String!): Entity
}