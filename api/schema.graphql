type Entity {
  id: ID!
  name: String
  description: String
  # cover: How do we want to represent cover?
  blocks: [Entity]!
  createdAt: String!
  createdAtBlock: String!
  updatedAt: String!
  updatedAtBlock: String!

  values: [Value]!
  relations: [Relation]!

  types: [Entity]!
  spaces: [String]!
}

type Property {
  id: ID!
  valueType: String! # TODO enum/union
  entity: Entity
}

type Value {
  id: ID!
  propertyId: String!
  entityId: String!
  spaceId: String!
  value: String

  entity: Entity
  property: Property

  language: String
  format: String
  unit: String
  timezone: String
  hasTime: Boolean
  hasDate: Boolean
}

type Relation {
  id: ID!
  spaceId: String!
  typeId: String!
  fromId: String!
  toId: String!
  toSpaceId: String
  position: String

  type: Entity
  from: Entity
  to: Entity
  # toSpace: Space
}

type Type {
  id: ID!
  name: String
  description: String

  properties: [Property]
  entity: Entity
}

type Query {
  entities(filter: EntityFilter, limit: Int = 100, offset: Int = 0, spaceId: String): [Entity]!
  entity(id: String!, spaceId: String): Entity
  types(spaceId: String, limit: Int = 100, offset: Int = 0): [Type]!
  # fuzzy search
  # relation
  # relations
  # property
  # properties
  # type
  # space
  # spaces
  # proposal
  # proposals
  # edit
  # edits
  # version?
  # versions?
}

input TextFilter {
  is: String
  contains: String
  startsWith: String
  endsWith: String
  exists: Boolean
  NOT: TextFilter
}

input NumberFilter {
  is: Float
  lessThan: Float
  lessThanOrEqual: Float
  greaterThan: Float
  greaterThanOrEqual: Float
  exists: Boolean
  NOT: NumberFilter
}

input CheckboxFilter {
  is: Boolean
  exists: Boolean
}

input PointFilter {
  is: [Float]
  exists: Boolean
}

input ValueFilter {
  property: String!
  text: TextFilter
  number: NumberFilter
  checkbox: CheckboxFilter
  point: PointFilter
}

input EntityFilter {
  OR: [EntityFilter!]
  NOT: EntityFilter
  value: ValueFilter
}
