type Entity {
  id: ID!
  name: String
  description: String
  # cover: How do we want to represent cover?
  blocks: [Block]!
  createdAt: String!
  createdAtBlock: String!
  updatedAt: String!
  updatedAtBlock: String!

  # Values associated with this entity, optionally filtered by spaceId
  # When spaceId is provided, only returns values from that specific space
  values(spaceId: String, filter: ValueFilter): [Value]!

  # Relations associated with this entity, optionally filtered by spaceId
  # When spaceId is provided, only returns relations from that specific space
  relations(spaceId: String, filter: RelationFilter): [Relation]!

  backlinks(spaceId: String, filter: RelationFilter): [Relation]!

  types: [Entity]!
  spaces: [String]!
}

enum DataSourceType {
  QUERY
  GEO
  COLLECTION
}

enum BlockType {
  TEXT
  IMAGE
  DATA
}

type Block {
  id: ID!
  type: BlockType!
  value: String # depends on the block type, e.g., text, image, video, etc.
  entity: Entity
  dataSourceType: DataSourceType
}

enum DataType {
  TEXT
  NUMBER
  CHECKBOX
  TIME
  POINT
  RELATION
}

enum RenderableType {
  URL
  IMAGE
}

enum SpaceType {
  PERSONAL
  PUBLIC
}

type Property {
  id: ID!
  dataType: DataType!
  renderableType: RenderableType
  relationValueTypes: [Type]
  entity: Entity
}

type Value {
  id: ID!
  propertyId: String!
  entityId: String!
  spaceId: String!
  value: String

  entity: Entity
  property: Property

  language: String
  format: String
  unit: String
  timezone: String
}

type Relation {
  id: ID!
  entityId: ID!
  spaceId: String!
  typeId: String!
  fromId: String!
  toId: String!
  toSpaceId: String
  position: String
  verified: Boolean

  type: Property
  from: Entity
  to: Entity
  relationEntity: Entity
}

type Type {
  id: ID!
  name: String
  description: String

  properties: [Property]
  entity: Entity
}

type Space {
  id: ID!
  type: SpaceType!
  daoAddress: String!
  spaceAddress: String!
  mainVotingAddress: String
  membershipAddress: String
  personalAddress: String

  entity: Entity
  editors: [Membership!]
  members: [Membership!]
}

type Account {
  id: ID!
  address: String!

  spacesWhereEdtitor: [Space]
  spacesWhereMember: [Space]
}

type Membership {
  id: ID!
  address: String!
  spaceId: String!

  space: Space
}

type Query {
  # Get multiple entities with optional space filtering
  # When spaceId is provided, the spaceId propagates to child resolvers for values and relations
  entities(
    filter: EntityFilter
    limit: Int = 100
    offset: Int = 0
    spaceId: String
  ): [Entity]!

  # Get a single entity by ID with optional space context
  # When spaceId is provided, the spaceId propagates to child resolvers for values and relations
  entity(id: String!, spaceId: String): Entity

  types(spaceId: String, limit: Int = 100, offset: Int = 0): [Type]!

  properties(
    filter: PropertyFilter
    limit: Int = 100
    offset: Int = 0
  ): [Property]!

  property(id: String!): Property

  # Search entities by name and description using pg_trgm similarity
  search(
    query: String!
    spaceId: String
    filter: SearchFilter
    limit: Int = 10
    offset: Int = 0
    threshold: Float = 0.3
  ): [Entity]!

  spaces(filter: SpaceFilter, limit: Int = 100, offset: Int = 0): [Space]!
  space(id: String!): Space

  # Get a single member by ID
  account(address: String!): Account

  relation(id: String!): Relation
  relations(
    spaceId: String
    filter: RelationFilter
    limit: Int = 100
    offset: Int = 0
  ): [Relation]!
  # property
  # properties
  # type

  # proposal
  # proposals
  # edit
  # edits
  # version?
  # versions?
}

input SearchFilter {
  or: [SearchFilter!]
  not: SearchFilter
  types: IdFilter
}

input AddressFilter {
  is: String
  in: [String!]
}

input SpaceFilter {
  id: IdFilter
  editor: AddressFilter
  member: AddressFilter
}

input PropertyFilter {
  dataType: DataType
}

input TextFilter {
  is: String
  contains: String
  startsWith: String
  endsWith: String
  exists: Boolean
  not: TextFilter
}

input NumberFilter {
  is: Float
  lessThan: Float
  lessThanOrEqual: Float
  greaterThan: Float
  greaterThanOrEqual: Float
  exists: Boolean
  not: NumberFilter
}

input CheckboxFilter {
  is: Boolean
  exists: Boolean
}

input PointFilter {
  is: [Float]
  exists: Boolean
}

input ValueFilter {
  property: String!
  text: TextFilter
  number: NumberFilter
  checkbox: CheckboxFilter
  point: PointFilter
}

input RelationFilter {
  typeId: String
  fromEntityId: String
  toEntityId: String
  relationEntityId: String

  type: IdFilter
  fromEntity: EntityFilter
  toEntity: EntityFilter
  relationEntity: EntityFilter
}

input IdFilter {
  in: [String!]
}

# Filter input for entities in Query.entities
# Supports logical operators and filtering by values and relations
input EntityFilter {
  or: [EntityFilter!]
  not: EntityFilter
  id: IdFilter
  types: IdFilter
  value: ValueFilter
  relation: RelationFilter
  backlink: RelationFilter
}
