// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edit {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub ops: ::prost::alloc::vec::Vec<Op>,
    #[prost(bytes = "vec", repeated, tag = "4")]
    pub authors: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub language: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportEdit {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub ops: ::prost::alloc::vec::Vec<Op>,
    #[prost(bytes = "vec", repeated, tag = "4")]
    pub authors: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", tag = "5")]
    pub created_by: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "6")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "7")]
    pub block_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "8")]
    pub block_number: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "9")]
    pub transaction_hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Import {
    /// these strings are IPFS cids representing the import edit message
    #[prost(string, repeated, tag = "1")]
    pub edits: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct File {
    #[prost(string, tag = "1")]
    pub version: ::prost::alloc::string::String,
    #[prost(oneof = "file::Payload", tags = "2, 3, 4")]
    pub payload: ::core::option::Option<file::Payload>,
}
/// Nested message and enum types in `File`.
pub mod file {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "2")]
        AddEdit(super::Edit),
        #[prost(message, tag = "3")]
        ImportSpace(super::Import),
        #[prost(bytes, tag = "4")]
        ArchiveSpace(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Op {
    #[prost(oneof = "op::Payload", tags = "1, 2, 3, 4, 5, 6, 7")]
    pub payload: ::core::option::Option<op::Payload>,
}
/// Nested message and enum types in `Op`.
pub mod op {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        UpdateEntity(super::Entity),
        #[prost(bytes, tag = "2")]
        DeleteEntity(::prost::alloc::vec::Vec<u8>),
        #[prost(message, tag = "3")]
        CreateRelation(super::Relation),
        #[prost(message, tag = "4")]
        UpdateRelation(super::RelationUpdate),
        #[prost(bytes, tag = "5")]
        DeleteRelation(::prost::alloc::vec::Vec<u8>),
        #[prost(message, tag = "6")]
        UnsetEntityValues(super::UnsetEntityValues),
        #[prost(message, tag = "7")]
        UnsetRelationFields(super::UnsetRelationFields),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnsetEntityValues {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub properties: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relation {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub r#type: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "3")]
    pub from_entity: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub from_space: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub from_version: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", tag = "6")]
    pub to_entity: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "7")]
    pub to_space: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "8")]
    pub to_version: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", tag = "9")]
    pub entity: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, optional, tag = "10")]
    pub position: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "11")]
    pub verified: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelationUpdate {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub from_space: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub from_version: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "4")]
    pub to_space: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", optional, tag = "5")]
    pub to_version: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(string, optional, tag = "6")]
    pub position: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7")]
    pub verified: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnsetRelationFields {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, optional, tag = "2")]
    pub from_space: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub from_version: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub to_space: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub to_version: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub position: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub verified: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entity {
    #[prost(bytes = "vec", tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "2")]
    pub values: ::prost::alloc::vec::Vec<Value>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Options {
    #[prost(oneof = "options::Value", tags = "1, 2, 3")]
    pub value: ::core::option::Option<options::Value>,
}
/// Nested message and enum types in `Options`.
pub mod options {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Value {
        #[prost(message, tag = "1")]
        Text(super::TextOptions),
        #[prost(message, tag = "2")]
        Number(super::NumberOptions),
        #[prost(message, tag = "3")]
        Time(super::TimeOptions),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Value {
    #[prost(bytes = "vec", tag = "1")]
    pub property: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub options: ::core::option::Option<Options>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TextOptions {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub language: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NumberOptions {
    #[prost(string, optional, tag = "1")]
    pub format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub unit: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeOptions {
    #[prost(string, optional, tag = "1")]
    pub format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub timezone: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, optional, tag = "3")]
    pub has_date: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub has_time: ::core::option::Option<bool>,
}
