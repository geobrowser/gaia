name: API Integration Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "api/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "api/**"
  workflow_dispatch:

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: gaia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      CHAIN_ID: "19411"
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/gaia_test
      NODE_ENV: test
      IPFS_KEY: test_ipfs_key
      IPFS_GATEWAY_WRITE: https://test-ipfs-write.example.com
      IPFS_GATEWAY_READ: https://test-ipfs-read.example.com
      RPC_ENDPOINT: https://test-rpc.example.com

    defaults:
      run:
        working-directory: ./api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ./api/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/package.json', '**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
        env:
          PGPASSWORD: test_password

      - name: Create pg_trgm extension
        run: |
          echo "Checking available extensions..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "SELECT name FROM pg_available_extensions WHERE name = 'pg_trgm';"
          
          echo "Creating pg_trgm extension..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;" -v ON_ERROR_STOP=1
          
          echo "Verifying extension was created..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "SELECT extname FROM pg_extension WHERE extname = 'pg_trgm';"
          
          echo "Testing similarity function..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "SELECT similarity('test', 'test');" || echo "Similarity function test failed"
        env:
          PGPASSWORD: test_password

      - name: Setup database schema
        run: bun run db:setup

      - name: Verify database schema
        run: |
          echo "Verifying database tables exist..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "\dt" || echo "Failed to list tables"
          
          echo "Checking entities table..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "SELECT COUNT(*) FROM entities;" || echo "Entities table not accessible"
          
          echo "Checking values table..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "SELECT COUNT(*) FROM values;" || echo "Values table not accessible"
          
          echo "Checking relations table..."
          psql -h localhost -p 5432 -U test_user -d gaia_test -c "SELECT COUNT(*) FROM relations;" || echo "Relations table not accessible"
        env:
          PGPASSWORD: test_password

      - name: Run linting
        run: bunx @biomejs/biome check src/

      - name: Run integration tests
        run: |
          echo "Running integration tests with verbose output..."
          bun run test:ci --reporter=verbose

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./api/coverage/
          retention-days: 7
